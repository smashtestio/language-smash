scopeName: 'source.smash'
name: 'smash'
fileTypes: ['smash']
foldingStartMarker: '^(\\s*)$'
foldingStopMarker: '^(\\s*)$'
patterns: [
    { include: '#debug' }
    { include: '#sequentialStepBlock' }
    { include: '#sequentialStep' }
    { include: '#textualStep' }
    { include: '#step' }
    { include: '#codeBlock' }
]
repository:
    debug: {
        match: '^(|.*\\s)(\\$|\\~\\~|\\~)(\\s+(.*?)(?=(\\{[^\\}]*$|$))|$)'
        name: 'markup.italic.debug.smash'
        patterns: [
            { include: "$self" }
        ]
    }
    sequentialStepBlock: {
        begin: '^(\\s*)\\.\\.(\\s*)(\/\/.*)?$'
        end: '^(?!\\1\\S)'
        name: 'entity.name.function.sequential.smash'
        beginCaptures:
            3: name: 'comment.line.double-slash.smash'
        patterns: [
            { include: "$self" }
        ]
    }
    sequentialStep: {
        begin: '^(\\s*)(\\S.*\\s)?\\.\\.(\\s+(.*?)(?=(\\{[^\\}]*$|$))|$)'
        end: '^(?!\\1\\s+)(?!\\s*$)'
        name: 'entity.name.function.sequential.smash'
        beginCaptures:
            0: patterns: [
                { include: "#partialSeqStep" }
            ]
        patterns: [
            { include: '$self' }
        ]
    }
    textualStep: {
        match: '(^\\s*(\\-\\s+.*?|.*?\\s\\-\\s*)((?=(\\{[^\\}]*$))|\\s*\\/\\/.*$|$))|(^\\s*[^\\*\\s].*\\s(?=(\\{[^\\}]*$)))'
        name: 'textual.smash'
        captures:
            0: patterns: [
                { include: "#partialTextualStep" }
            ]
        patterns: [
            { include: '$self' }
        ]
    }
    step: {
        match: '^\\s*(((\\-s|\\.s|\\$s|\\-|\\!|\\.\\.|\\~\\~|\\~|\\$|\\+\\?|\\+|\\#[^\\s]+)\\s+)*)((\\*{1,3}\\s+)?(\'([^\\\\\']|(\\\\\\\\)*\\\\.)*\'|"([^\\\\"]|(\\\\\\\\)*\\\\.)*"|.*?)+?)((\\s+(\\-s|\\.s|\\$s|\\-|\\!|\\.\\.|\\~\\~|\\~|\\$|\\+\\?|\\+|\\#[^\\s]+))*)(\\s+(?=(\\{[^\\}]*$))|\\s*(\\/\\/.*$)|\\s*$)'
        captures:
            1: name: 'keyword.control.modifier.smash'
            4: {
                patterns: [
                    { include: '#functionDeclaration' }
                    { include: '#singleQuote' }
                    { include: '#doubleQuote' }
                    { include: '#bracketedString' }
                    { include: '#escapeChar' }
                    { include: '#variable' }
                ]
            }
            11: name: 'keyword.control.modifier.smash'
            16: name: 'comment.line.double-slash.smash'
    }
    partialSeqStep: {
        match: '\\s*(((\\-s|\\.s|\\$s|\\-|\\!|\\~\\~|\\~|\\$|\\+\\?|\\+|\\#[^\\s]+)\\s+)*)((\\*{1,3}\\s+)?(\'([^\\\\\']|(\\\\\\\\)*\\\\.)*\'|"([^\\\\"]|(\\\\\\\\)*\\\\.)*"|.*?)+?)((\\s+(\\-s|\\.s|\\$s|\\-|\\!|\\~\\~|\\~|\\$|\\+\\?|\\+|\\#[^\\s]+))*)(\\s+(?=(\\{[^\\}]*$))|\\s*(\\/\\/.*$)|\\s*$)'
        captures:
            1: name: 'keyword.control.modifier.smash'
            4: {
                patterns: [
                    { include: '#singleQuote' }
                    { include: '#doubleQuote' }
                    { include: '#bracketedString' }
                    { include: '#escapeChar' }
                    { include: '#variable' }
                ]
            }
            11: name: 'keyword.control.modifier.smash'
            16: name: 'comment.line.double-slash.smash'
    }
    partialTextualStep: {
        match: '\\s*(((\\-s|\\.s|\\$s|\\-|\\!|\\.\\.|\\~\\~|\\~|\\$|\\+\\?|\\+|\\#[^\\s]+)\\s+)*)((\\*{1,3}\\s+)?(\'([^\\\\\']|(\\\\\\\\)*\\\\.)*\'|"([^\\\\"]|(\\\\\\\\)*\\\\.)*"|.*?)+?)((\\s+(\\-s|\\.s|\\$s|\\-|\\!|\\.\\.|\\~\\~|\\~|\\$|\\+\\?|\\+|\\#[^\\s]+))*)(\\s+(?=(\\{[^\\}]*$))|\\s*(\\/\\/.*$)|\\s*$)'
        captures:
            1: name: 'keyword.control.modifier.smash'
            4: {
                patterns: [
                    { include: '#escapeChar' }
                    { include: '#variable' }
                ]
            }
            11: name: 'keyword.control.modifier.smash'
            16: name: 'comment.line.double-slash.smash'
    }
    functionDeclaration: {
        match: '\\*{1,3}\\s+(.*)'
        name: 'support.class.function-declaration.smash'
        captures:
            1: {
                patterns: [
                    { include: '#singleQuote' }
                    { include: '#doubleQuote' }
                    { include: '#bracketedString' }
                    { include: '#escapeChar' }
                    { include: '#variable' }
                ]
            }
    }
    singleQuote: {
        begin: '\'(?=.*\')'
        end: '\''
        name: 'string.quoted.single.smash'
        patterns: [
            { include: '#escapeChar' }
            { include: '#variable' }
        ]
    }
    doubleQuote: {
        begin: '\"'
        end: '\"'
        name: 'string.quoted.double.smash'
        patterns: [
            { include: '#escapeChar' }
            { include: '#variable' }
        ]
    }
    variable: {
        begin: '\\{\\{?'
        end: '\\}\\}?'
        name: 'variable.smash'
        patterns: [
            {
                match: ':'
                name: 'keyword.control.modifier.lookahead.smash'
            }
        ]
    }
    escapeChar: {
        match: '\\\\.',
        name: 'constant.character.escape.smash'
    }
    bracketedString: {
        begin: '\\['
        end: '\\]'
        name: 'string.quoted.other.smash'
        patterns: [
            { include: '#escapeChar' }
            { include: '#variable' }
            { include: '#bracketedString' }
        ]
    }
    codeBlock: {
        begin: '\\{'
        end: '\\}'
        name: 'codeblock.smash'
        patterns: [
            { include: 'source.js' }
        ]
    }
